{"version":3,"sources":["PasswordField/PasswordField.jsx","SettingsForm/SettingsForm.jsx","Title/Title.jsx","App.jsx","index.js"],"names":["useStyles","makeStyles","root","display","flexDirection","justifyContent","alignItems","height","textField","minWidth","width","button","alert","backgroundColor","PasswordField","passwordValue","generatePassword","classes","useState","isPasswordVisible","setIsPasswordVisible","showCopyAlert","setShowCopyAlert","handleMouseDown","e","preventDefault","Box","className","FormControl","variant","InputLabel","htmlFor","Snackbar","message","open","autoHideDuration","onClose","OutlinedInput","startAdornment","text","onCopy","Tooltip","title","placement","arrow","InputAdornment","position","IconButton","onMouseDown","id","type","value","color","label","endAdornment","onClick","prev","Button","passwordLengthField","alignSelf","marginTop","marginBottom","slider","passwordLengthInput","setsOfSymbols","extraSymbolsField","extraSymbolsInput","extraSymbolsButton","SettingsForm","formState","setFormState","inputValue","setInputValue","setAdditionalSymbols","setOfSymbols","handleChangeCheckbox","target","name","checked","Set","inputSet","setInputSet","lowercase","uppercase","numbers","error","filter","item","length","passwordLength","setPasswordLength","useEffect","Typography","Slider","onChange","event","newValue","valueLabelDisplay","step","marks","min","max","Input","margin","Number","onBlur","inputProps","align","component","FormGroup","FormControlLabel","control","Checkbox","FormHelperText","onSubmit","fullWidth","has","add","Array","from","join","Title","App","defaultValuesObject","split","additionalSymbols","setSetOfSymbols","generatedPassword","setGeneratedPassword","addNewValues","values","set","forEach","generateSetOfSymbols","key","includes","tempPassword","arrayOfSymbols","i","randomSymbol","Math","floor","random","push","size","CssBaseline","Container","maxWidth","style","overflow","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.03a92af9.chunk.js","sourcesContent":["import React from 'react'\r\nimport { makeStyles } from '@material-ui/core'\r\nimport Visibility from '@material-ui/icons/Visibility'\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\r\nimport { useState } from 'react'\r\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard'\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Box from '@material-ui/core/Box';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: 'space-around',\r\n        alignItems: 'center',\r\n        height: '150px',\r\n    },\r\n    textField: {\r\n        minWidth: '250px',\r\n        width: '70vw',\r\n    },\r\n    button: {\r\n        minWidth: '250px',\r\n        width: '50vw',\r\n        height: '50px',\r\n    },\r\n    alert: {\r\n        backgroundColor: 'cyan',\r\n    }\r\n})\r\n\r\nconst PasswordField = ({ passwordValue, generatePassword }) => {\r\n    const classes = useStyles();\r\n\r\n    const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n    const [showCopyAlert, setShowCopyAlert] = useState(false);\r\n\r\n    const handleClickShowPassword = () => {\r\n        setIsPasswordVisible((prev) => !prev)\r\n    };\r\n\r\n    const handleMouseDown = (e) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    const handleCopy = () => {\r\n        setShowCopyAlert(true)\r\n    };\r\n\r\n    const handleCloseCopyAlert = () => {\r\n        setShowCopyAlert(false)\r\n    }\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            <FormControl variant='outlined'>\r\n                <InputLabel htmlFor=\"password\">Here your password will appear</InputLabel>\r\n                <Snackbar message='Password was copied to the clipboard' open={showCopyAlert} autoHideDuration={3000} onClose={handleCloseCopyAlert} />\r\n                <OutlinedInput\r\n                    startAdornment={\r\n                        <CopyToClipboard text={passwordValue} onCopy={handleCopy}>\r\n                            <Tooltip title='Click here to copy the password to clipboard' placement='left' arrow>\r\n                                <InputAdornment position=\"start\">\r\n                                    <IconButton\r\n                                        onMouseDown={handleMouseDown}\r\n                                    >\r\n                                        <FileCopyIcon />\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            </Tooltip>\r\n                        </CopyToClipboard>\r\n                    }\r\n                    id=\"password\"\r\n                    type={isPasswordVisible ? 'text' : 'password'}\r\n                    value={passwordValue}\r\n                    color='primary'\r\n                    className={classes.textField}\r\n                    label='here your password will appear'\r\n                    endAdornment={\r\n                        <InputAdornment position=\"end\">\r\n                            <Tooltip title='Show or hide the password'>\r\n                                <IconButton\r\n                                    onClick={handleClickShowPassword}\r\n                                    onMouseDown={handleMouseDown}\r\n                                >\r\n                                    {isPasswordVisible ? <Visibility /> : <VisibilityOff />}\r\n                                </IconButton>\r\n                            </Tooltip>\r\n                        </InputAdornment>\r\n                    }\r\n                />\r\n            </FormControl>\r\n            <Button variant='contained' color='secondary' className={classes.button} onClick={generatePassword}>Generate</Button>\r\n        </Box >\r\n    )\r\n}\r\n\r\nexport default PasswordField\r\n","import React, { useState, useEffect } from 'react'\r\nimport { makeStyles } from '@material-ui/core'\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\r\nimport Button from '@material-ui/core/Button';\r\nimport Box from '@material-ui/core/Box';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Input from '@material-ui/core/Input';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    passwordLengthField: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignSelf: 'center',\r\n        alignItems: 'center',\r\n        marginTop: '25px',\r\n        marginBottom: '25px',\r\n    },\r\n    slider: {\r\n        minWidth: '250px',\r\n        width: '50vw',\r\n    },\r\n    passwordLengthInput: {\r\n        width: '50px'\r\n    },\r\n    setsOfSymbols: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignSelf: 'center',\r\n        alignItems: 'center',\r\n        marginBottom: '25px',\r\n    },\r\n    extraSymbolsField: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        marginBottom: '25px'\r\n    },\r\n    extraSymbolsInput: {\r\n        width: '99%'\r\n    },\r\n    extraSymbolsButton: {\r\n        width: '10%'\r\n    },\r\n})\r\n\r\nconst SettingsForm = ({ formState, setFormState, inputValue, setInputValue, setAdditionalSymbols, setOfSymbols }) => {\r\n    const classes = useStyles()\r\n\r\n    const handleChangeCheckbox = (e) => {\r\n        setFormState({ ...formState, [e.target.name]: e.target.checked });\r\n    };\r\n\r\n    const [inputSet, setInputSet] = useState(new Set(setOfSymbols))\r\n\r\n    const handleChangeInputExtraSymbols = (e) => {\r\n        if (!inputSet.has(e.target.value[e.target.value.length - 1])) {\r\n            setInputSet((prev) => prev.add(e.target.value[e.target.value.length - 1]));\r\n            setInputValue(Array.from(inputSet).filter((item) => !setOfSymbols.has(item)).join(''));\r\n        }\r\n    }\r\n\r\n    const { lowercase, uppercase, numbers } = formState;\r\n\r\n    const error = [lowercase, uppercase, numbers].filter(item => item).length === 0;\r\n\r\n    const [passwordLength, setPasswordLength] = useState(formState.passwordLength);\r\n\r\n    const handleSliderChange = (event, newValue) => {\r\n        setPasswordLength(newValue);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setPasswordLength(event.target.value === '' ? '' : Number(event.target.value));\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (passwordLength < 0) {\r\n            setPasswordLength(0);\r\n        } else if (passwordLength > 50) {\r\n            setPasswordLength(50);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setFormState((prev) => ({ ...prev, passwordLength: passwordLength }))\r\n    }, [passwordLength, setFormState])\r\n\r\n    return (\r\n        <Box className={classes.root}>\r\n            <Box className={classes.passwordLengthField} >\r\n                <Typography variant='h5'>Password length</Typography>\r\n                <Slider\r\n                    className={classes.slider}\r\n                    value={typeof passwordLength === 'number' ? passwordLength : 0}\r\n                    onChange={handleSliderChange}\r\n                    valueLabelDisplay='auto'\r\n                    step={1}\r\n                    marks\r\n                    min={6}\r\n                    max={50}\r\n                />\r\n                <Input\r\n                    className={classes.passwordLengthInput}\r\n                    value={passwordLength}\r\n                    margin=\"dense\"\r\n                    onChange={handleInputChange}\r\n                    onBlur={handleBlur}\r\n                    inputProps={{\r\n                        step: 1,\r\n                        min: 6,\r\n                        max: 50,\r\n                        type: 'number',\r\n                    }}\r\n                />\r\n            </Box>\r\n            <Box className={classes.setsOfSymbols}>\r\n                <Typography variant='h5' align='center'>Choose set of symbols for your password</Typography>\r\n                <FormControl error={error} component=\"fieldset\" >\r\n                    <FormGroup >\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={lowercase} onChange={handleChangeCheckbox} />}\r\n                            label=\"Lowercase\" name=\"lowercase\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={uppercase} onChange={handleChangeCheckbox} />}\r\n                            label=\"Uppercase\" name=\"uppercase\"\r\n                        />\r\n                        <FormControlLabel\r\n                            control={<Checkbox checked={numbers} onChange={handleChangeCheckbox} />}\r\n                            label=\"Numbers\" name=\"numbers\"\r\n                        />\r\n                    </FormGroup>\r\n                    <FormHelperText>{error && 'Pick at least 1 item'}</FormHelperText>\r\n                </FormControl>\r\n            </Box>\r\n            <form className={classes.extraSymbolsField} onSubmit={setAdditionalSymbols}>\r\n                <FormControl fullWidth variant=\"outlined\">\r\n                    <InputLabel htmlFor=\"extra-symbols\">Type extra symbols here</InputLabel>\r\n                    <OutlinedInput\r\n                        className={classes.extraSymbolsInput}\r\n                        id=\"extra-symbols\"\r\n                        label='Type extra symbols here'\r\n                        value={inputValue}\r\n                        onChange={handleChangeInputExtraSymbols}\r\n                    />\r\n                </FormControl>\r\n                <Button className={classes.extraSymbolsButton} variant='contained' color='secondary' type='submit'>Add</Button>\r\n            </form>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SettingsForm\r\n","import React from 'react'\r\nimport { Typography } from '@material-ui/core'\r\n\r\nconst Title = () => {\r\n    return (\r\n        <Typography variant='h2' align='center'>\r\n            Password Generator\r\n        </Typography>\r\n    )\r\n}\r\n\r\nexport default Title\r\n","import React, { useState, useEffect, Fragment } from 'react'\nimport PasswordField from './PasswordField/PasswordField';\nimport SettingsForm from './SettingsForm/SettingsForm';\nimport Title from './Title/Title';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\n\nconst App = () => {\n  const defaultValuesObject = {\n    lowercase: 'abcdefghijklmnopqrstuvwxyz'.split(''),\n    uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split(''),\n    numbers: '1234567890'.split(''),\n  }\n\n  const [formState, setFormState] = useState({ lowercase: true, uppercase: true, numbers: true, passwordLength: 9, isPasswordVisible: true, additionalSymbols: new Set() });\n  const [inputValue, setInputValue] = useState('');\n  const [setOfSymbols, setSetOfSymbols] = useState(new Set())\n  const [generatedPassword, setGeneratedPassword] = useState('');\n\n  const addNewValues = (values, set) => {\n    values.forEach((item) => {\n      set.add(item)\n    })\n  }\n\n  const getRandomIndex = (length) => {\n    return Math.floor(Math.random() * length);\n  }\n\n  const generateSetOfSymbols = () => {\n    let set = new Set();\n    for (let key in formState) {\n      if (formState[key] === true && ['lowercase', 'uppercase', 'numbers'].includes(key)) {\n        addNewValues(defaultValuesObject[key], set)\n      };\n      if (key === 'additionalSymbols') {\n        addNewValues(formState.additionalSymbols, set)\n      };\n    };\n    setSetOfSymbols(set);\n  }\n\n  const generatePassword = () => {\n    let tempPassword = [];\n    const arrayOfSymbols = Array.from(setOfSymbols);\n    for (let i = 0; i < formState.passwordLength; i++) {\n      const randomSymbol = arrayOfSymbols[getRandomIndex(arrayOfSymbols.length)];\n      tempPassword.push(randomSymbol);\n    }\n    setGeneratedPassword(tempPassword.join(''))\n  }\n\n  const setAdditionalSymbols = (e) => {\n    e.preventDefault()\n    setFormState((prev) => {\n      let set = new Set()\n      addNewValues(inputValue.split('').filter((item) => item !== ' '), set)\n      return {\n        ...prev,\n        additionalSymbols: set\n      }\n    })\n  }\n\n  useEffect(() => {\n    generateSetOfSymbols();\n    if (setOfSymbols.size > 0) generatePassword();\n  }, [formState])\n\n  useEffect(() => {\n    generateSetOfSymbols();\n    if (setOfSymbols.size > 0) generatePassword();\n  }, [setOfSymbols.size])\n\n  return (\n    <Fragment>\n      <CssBaseline />\n      <Container maxWidth='xl' style={{ overflow: 'hidden' }}>\n        <Title />\n        <PasswordField\n          passwordValue={generatedPassword}\n          generatePassword={generatePassword}\n          formState={formState}\n          setFormState={setFormState} />\n        <SettingsForm\n          formState={formState}\n          setFormState={setFormState}\n          inputValue={inputValue}\n          setInputValue={setInputValue}\n          setAdditionalSymbols={setAdditionalSymbols}\n          setOfSymbols={setOfSymbols}\n          setSetOfSymbols={setSetOfSymbols} />\n      </Container>\n    </Fragment>\n  )\n}\n\nexport default App\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}